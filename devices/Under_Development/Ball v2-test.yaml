substitutions:
  name: esphome-web-0bac48
  friendly_name: "Xiaozhi Ball V2"

## SETTINGS ######################################################################################################################################

  imagemodel: "HA-character" # options are:

##################################################################################################################################################
# Alfred, Astrobot, Buzz, Casita, Cybergirl, Dory, EVE, Eyes, Eyes2, GLaDOS, Girl1, Guy1, Guy2, Gwen, HA-character, Hacker, Harley, Jarvis,
# Luffy, Mario, Max, Prime, Robochibi, Robocop, Robot, Robotgirl, Shaun
##################################################################################################################################################

  startup_sound: "Home_Connected_Male" # (options are: available, Home_ Connected, Home_ Connected_Male, Computer_Ready)
  clock_timezone: "Europe/Copenhagen"
  clock_background_image: "hacker" # (options are: clock, hacker)

  imagewidth: "240" # GC9A01A (Ball v2 & Muma & Puck) "240"
  imageheight: "240" # GC9A01A (Ball v2 & Muma & Puck) "240"
  displaymodel: "GC9A01A" # GC9A01A (Ball v2 & Puck) or ST7789V (Muma)
  invertcolors: "true" # GC9A01A/ST7789V (Ball v2 & Muma & Puck) "true"

##################################################################################################################################################

  loading_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/loading.png
  idle_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/idle.png
  listening_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/listening.png
  thinking_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/thinking.png
  replying_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/replying.png
  error_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/error.png
  timer_finished_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/timer_finished.png
  mute_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/mute.png
  playing_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/playing.png
  clock_background_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/Other/${imagewidth}x${imageheight}/${clock_background_image}.png

  startup_sound_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/${startup_sound}.flac

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "000000"
  thinking_illustration_background_color: "000000"
  replying_illustration_background_color: "000000"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

  allowed_characters: " !#%'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？"

  font_glyphsets: "GF_Latin_Core"
  font_family: Figtree

## CUSTOM CLOCK PAGE ### (rem. out the one you want to use) ######################################################################################
## CAUTION!: running intensive clock "screensavers" can cause trouble flashing OTA, if that happens, make sure the clock is not running ##########
##################################################################################################################################################
packages:
  clock:
    url: https://github.com/RealDeco/xiaozhi-esphome
    files:
#     - path: images/Other/clocks/clock.yaml
     - path: images/Other/clocks/flip_clock.yaml
    ref: main
    refresh: 1d
##################################################################################################################################################

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: false
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  on_client_connected:
    - script.execute: draw_display
    - lambda: |-
        if (!id(boot_sound_played)) {
          id(boot_sound_played) = true;
          if (id(startup_sound_switch).state) {
            id(play_sound)->execute(true, id(ready_sound));
          }
        }
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    password: "RZ7D3EzJdPM6"
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

captive_portal:

time:
  - platform: sntp
    id: sntp_time
    timezone: ${clock_timezone}

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

  - platform: template
    name: "Virtual Touch"
    id: virtual_touch
    on_press:
      - script.execute: handle_screen_tap

number:
  - platform: template
    id: clock_delay_seconds
    name: "Clock Screensaver Delay"
    unit_of_measurement: "s"
    icon: "mdi:timer-outline"
    entity_category: config
    optimistic: true
    restore_value: true
    mode: box
    min_value: 5
    max_value: 600
    step: 5
    initial_value: 30

sensor:
  - platform: adc
    pin: GPIO1
    name: "Battery Voltage"
    id: battery_voltage
    attenuation: 12db
    accuracy_decimals: 2
    update_interval: 1s
    unit_of_measurement: "V"
    icon: mdi:battery-medium
    filters:
      - multiply: 2.0
      - median:
          window_size: 7
          send_every: 7
          send_first_at: 7
      - throttle: 1min
    on_value:
      then:
        - component.update: battery_percentage
      
  - platform: template
    id: battery_percentage
    name: "Battery Percentage"
    lambda: return id(battery_voltage).state;
    accuracy_decimals: 0
    unit_of_measurement: "%"
    icon: mdi:battery-medium
    filters:
      - calibrate_linear:
         method: exact
         datapoints:
          - 2.80 -> 0.0
          - 3.10 -> 10.0
          - 3.30 -> 20.0
          - 3.45 -> 30.0
          - 3.60 -> 40.0
          - 3.70 -> 50.0
          - 3.75 -> 60.0
          - 3.80 -> 70.0
          - 3.90 -> 80.0
          - 4.00 -> 90.0
          - 4.20 -> 100.0
      - lambda: |-
          if (x > 100) return 100;
          if (x < 0) return 0;
          return x;
    on_value:
      then:
        - lambda: |-
            int current = (int)x;
            if (current != id(last_battery_percent)) {
              id(last_battery_percent) = current;
              id(draw_display).execute();
            }

binary_sensor:
  - platform: template
    name: "Touch Button"
    id: touch_input
    on_multi_click:
      # Single tap
      - timing:
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      lambda: return id(wake_word_engine_location).state == "On device";
                    then:
                      - if:
                          condition:
                            not:
                              voice_assistant.is_running:
                          then:
                            - voice_assistant.start:
                          else:
                            - voice_assistant.stop:  

      - timing:
          - ON for at least 1s
        then:
          - switch.toggle: show_battery_status
          - script.execute: draw_display

  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      ignore_strapping_warning: true
      inverted: true
    id: left_top_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - script.execute: reset_screensaver
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      not:
                        voice_assistant.is_running:
                    then:
                      - voice_assistant.start:
                    else:
                      - voice_assistant.stop:
          - display.page.show: idle_page
          - component.update: main_display
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

  - platform: template
    name: "Timer Ringing Active"
    id: timer_ringing_active
    device_class: sound
    lambda: |-
      return id(timer_ringing).state;

output:
  - platform: ledc
    pin: 42
    id: backlight_output
    inverted: true 

  - platform: template
    id: clock_color_r
    type: float
    write_action:
      - lambda: |-
          // Nothing to do — value is just stored
          return;

  - platform: template
    id: clock_color_g
    type: float
    write_action:
      - lambda: |-
          return;

  - platform: template
    id: clock_color_b
    type: float
    write_action:
      - lambda: |-
          return;

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms
  - platform: esp32_rmt_led_strip
    id: led
    name: none
    disabled_by_default: false
    entity_category: config
    pin: GPIO48
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

  - platform: rgb
    id: clock_color_picker
    name: "Clock Color"
    entity_category: config
    red: clock_color_r
    green: clock_color_g
    blue: clock_color_b

i2c:
  - id: bus_a
    sda: 15
    scl: 14
    scan: true
  - id: bus_b
    sda: 11
    scl: 7
    scan: true

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin: GPIO9
    i2s_mclk_pin: GPIO16

audio_dac:
  - platform: es8311
    i2c_id: bus_a 
    id: es8311_dac
    bits_per_sample: 16bit
    sample_rate: 16000

microphone:
  - platform: i2s_audio
    id: box_mic
    i2s_audio_id: i2s_audio_bus
    i2s_din_pin: GPIO10
    adc_type: external
    channel: left
    pdm: false
    sample_rate: 16000
    bits_per_sample: 16bit

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_audio_id: i2s_audio_bus
    i2s_dout_pin: GPIO8
    dac_type: external
    audio_dac: es8311_dac
    channel: stereo

media_player:
  - platform: speaker
    name: None
    id: external_media_player
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 16000
      num_channels: 1
    files:
      - id: timer_finished_sound
        file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/wake_word_triggered.flac
      - id: ready_sound
        file: ${startup_sound_file}

    on_announcement:
      # Stop the wake word (mWW or VA) if the mic is capturing
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            # Ensure VA stops before moving on
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:

      # Distinguish internal vs external regardless of VA running
      - if:
          condition:
            lambda: 'return id(playing_internal_sound);'
          then:
            # Internal sound (wake, etc)
            - lambda: 'id(playing_internal_sound) = false;'
          else:
            # External (from Home Assistant): show Now Playing
            - script.execute: reset_screensaver
            - display.page.show: now_playing_page
            - component.update: main_display

    on_idle:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_jarvis
    - alexa
  on_wake_word_detected:
    - script.execute: reset_screensaver
    - if:
        condition:
          switch.is_on: wake_sound
        then:
          - script.execute:
              id: play_sound
              priority: true
              sound_file: !lambda return id(wake_word_triggered_sound);
          - delay: 300ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: external_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - script.execute: reset_screensaver
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request_full
        state: "..."
    - text_sensor.template.publish:
        id: text_response_full
        state: "..."
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - text_sensor.template.publish:
        id: text_request_full
        state: !lambda return x;
    - script.execute: draw_display
  on_tts_start:
    - script.execute: reset_screensaver
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - text_sensor.template.publish:
        id: text_response_full
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - lambda: 'id(playing_internal_sound) = true;'
    - script.execute: draw_display
  on_end:
    # Wait a short amount of time to see if an announcement starts
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Announcement is finished and the I2S bus is free
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    # Clear text sensors
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
#    - text_sensor.template.publish:
#        id: text_request_full
#        state: ""
#    - text_sensor.template.publish:
#        id: text_response_full
#        state: ""
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: reset_screensaver
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

interval:
  - interval: 1s
    then:
      - if:
          condition:
            and:
              - lambda: return id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
              - switch.is_off: mute
              - lambda: return id(clock_enabled).state;   # screensaver enabled?
          then:
            - lambda: |-
                id(idle_seconds)++;
                // Use HA-configured delay (cast to int)
                int delay_s = (int) id(clock_delay_seconds).state;
                delay_s = delay_s <= 0 ? 30 : delay_s; // safety fallback
                if (id(idle_seconds) >= delay_s && !id(show_clock)) {
                  id(show_clock) = true;
                  id(main_display).show_page(clock_page);
                  id(main_display).update();
                }
          else:
            - lambda: |-
                if (id(show_clock)) {
                  id(show_clock) = false;
                }
                id(idle_seconds) = 0;

      # Keep the clock ticking every second when active
      - if:
          condition:
            lambda: return id(show_clock);
          then:
            - component.update: main_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            // Screensaver clock while idle (only if enabled)
                            if (id(voice_assistant_phase) == ${voice_assist_idle_phase_id}
                                && id(show_clock)
                                && id(clock_enabled).state) {
                              id(main_display).show_page(clock_page);
                              id(main_display).update();
                              return;
                            }
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(main_display).show_page(listening_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(main_display).show_page(thinking_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(main_display).show_page(replying_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(main_display).show_page(error_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(main_display).show_page(muted_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(main_display).show_page(no_ha_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                id(main_display).show_page(timer_finished_page);
                                id(main_display).update();
                                break;
                              default:
                                id(main_display).show_page(idle_page);
                                id(main_display).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: main_display
                else:
                  - display.page.show: no_wifi_page
                  - component.update: main_display
          else:
            - display.page.show: initializing_page
            - component.update: main_display


  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: draw_timer_timeline
    then:
      - lambda: |-
          // Dynamically center a bottom progress bar
          const int W = id(main_display).get_width();
          const int H = id(main_display).get_height();

          const int padding = 20;         // left/right margin
          const int bar_h   = 15;         // total bar height
          const int bar_w   = W - (padding * 2);
          const int x       = (W - bar_w) / 2;
          const int y       = H - (bar_h + 15);   // 15px above the bottom edge
          const int fill_h  = bar_h - 2;

          id(check_if_timers_active).execute();
          id(check_if_timers).execute();

          if (id(global_is_timer_active)) {
            id(fetch_first_active_timer).execute();
            int filled = round(
              bar_w * id(global_first_active_timer).seconds_left
              / max(id(global_first_active_timer).total_seconds, static_cast<uint32_t>(1))
            );
            // background
            id(main_display).filled_rectangle(x, y, bar_w, bar_h, Color::WHITE);
            // fill
            if (filled > 0) {
              id(main_display).filled_rectangle(x, y + 1, filled, fill_h, id(active_timer_color));
            }
          } else if (id(global_is_timer)) {
            id(fetch_first_timer).execute();
            int filled = round(
              bar_w * id(global_first_timer).seconds_left
              / max(id(global_first_timer).total_seconds, static_cast<uint32_t>(1))
            );
            id(main_display).filled_rectangle(x, y, bar_w, bar_h, Color::WHITE);
            if (filled > 0) {
              id(main_display).filled_rectangle(x, y + 1, filled, fill_h, id(paused_timer_color));
            }
          }

  - id: draw_active_timer_widget
    then:
      - lambda: |-
          id(check_if_timers_active).execute();
          if (!id(global_is_timer_active)) return;

          // --- Layout based on screen size ---
          const int W = id(main_display).get_width();
          const int H = id(main_display).get_height();
          const int cx = W / 2;

          // Box size: ~55% of width, ~16% of height, with sane limits
          int box_w = std::min(W - 40, std::max((int)(W * 0.55f), 140));
          int box_h = std::min((int)(H * 0.16f), 70);
          box_h = std::max(box_h, 40);

          // Position: top area (~1/8 from top), centered horizontally
          int x = (W - box_w) / 2;
          int y = H / 8;

          // --- Draw widget frame ---
          id(main_display).filled_rectangle(x, y, box_w, box_h, Color::WHITE);
          id(main_display).rectangle(x, y, box_w, box_h, Color::BLACK);

          // --- Compute time string for first active timer ---
          id(fetch_first_active_timer).execute();
          int hours_left   = floor(id(global_first_active_timer).seconds_left / 3600);
          int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
          int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60;

          auto hh = (hours_left   < 10 ? "0" : "") + std::to_string(hours_left);
          auto mm = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
          auto ss = (seconds_left < 10 ? "0" : "") + std::to_string(seconds_left);

          std::string display_string;
          if (hours_left > 0) {
            display_string = hh + ":" + mm;       // e.g., 01:23
          } else {
            display_string = mm + ":" + ss;       // e.g., 07:05
          }

          // --- Center text inside the box ---
          id(main_display).printf(
            cx, y + (box_h / 2),
            id(font_timer), Color::BLACK,
            TextAlign::CENTER, "%s", display_string.c_str()
          );

  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: reset_screensaver

  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          id(playing_internal_sound) = true;
          if (priority) {
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ( (id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING ) || priority) {
            id(external_media_player)
              ->play_file(sound_file, true, false);
          }

  - id: reset_screensaver
    then:
      - lambda: |-
          id(show_clock) = false;
          id(idle_seconds) = 0;

  - id: handle_screen_tap
    then:
      - script.execute: reset_screensaver
      - if:
          condition:
            switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing
          else:
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "On device";
                then:
                  - if:
                      condition:
                        not:
                          voice_assistant.is_running:
                      then:
                        - voice_assistant.start:
                      else:
                        - voice_assistant.stop:
      - display.page.show: idle_page
      - component.update: main_display

switch:
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: reset_screensaver
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: reset_screensaver
      - script.execute: draw_display
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - lambda: |-
              id(external_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      - media_player.stop:
          announcement: true
    on_turn_on:
      - lambda: |-
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

  - platform: gpio
    name: Speaker Enable
    icon: "mdi:speaker"
    entity_category: config
    pin: GPIO46
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: wake_sound
    name: Wake sound
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: startup_sound_switch
    name: Startup sound
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: show_text
    name: Show Text
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: show_battery_status
    name: Show Battery Status
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: draw_display
    on_turn_off:
      - script.execute: draw_display

  - platform: template
    id: clock_enabled
    name: "Clock Screensaver"
    icon: "mdi:clock-outline"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_off:
      # If it was showing, hide it immediately
      - lambda: |-
          if (id(show_clock)) id(show_clock) = false;
          id(idle_seconds) = 0;
      - display.page.show: idle_page
      - component.update: main_display

  - platform: template
    id: clock_24h
    name: "Clock 24h Format"
    icon: "mdi:clock-time-four-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_seconds
    name: "Clock Show Seconds"
    icon: "mdi:timer-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON  # starts with seconds visible

  - platform: template
    id: clock_show_date
    name: "Clock Show Date"
    icon: "mdi:calendar"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_dots
    name: "Clock Show Dots"
    icon: "mdi:dots-circle"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_wallpaper
    name: "Clock Show Wallpaper"
    icon: "mdi:dots-circle"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false
  - id: last_battery_percent
    type: int
    restore_value: no
    initial_value: '-1'
  - id: playing_internal_sound
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: boot_sound_played
    type: bool
    restore_value: no
    initial_value: "false"
  - id: idle_seconds
    type: int
    restore_value: no
    initial_value: "0"
  - id: show_clock
    type: bool
    restore_value: no
    initial_value: "false"

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${mute_illustration_file}
    id: casita_muted
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${playing_illustration_file}
    id: casita_playing
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: ${clock_background_file}
    id: clock_background
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: https://raw.githubusercontent.com/RealDeco/xiaozhi-esphome/main/images/Other/error-no-wifi.png
    id: error_no_wifi
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel
  - file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/Other/error-no-ha.png
    id: error_no_ha
    resize: ${imagewidth}x${imageheight}
    type: RGB565
    transparency: alpha_channel

font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
      italic: true
    id: font_request
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_response
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_battery
    size: 14
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_timer
    size: 28
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: Syne Mono
      weight: 400
    id: font_big_clock_mono
    size: 30
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 400
    id: font_big_date
    size: 18
    glyphsets:
      - ${font_glyphsets}

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>30) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>30) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

  - id: text_request_full
    platform: template
    name: "Text Request"
    on_value:
      lambda: |-
        // Keep HA state under 255 chars to avoid "unknown"
        if (id(text_request_full).state.length() > 250) {
          std::string s = id(text_request_full).state.c_str();
          std::string truncated = esphome::str_truncate(s.c_str(), 250);
          id(text_request_full).state = truncated.c_str();
        }

  - id: text_response_full
    platform: template
    name: "Text Response"
    on_value:
      lambda: |-
        // Keep HA state under 255 chars to avoid "unknown"
        if (id(text_response_full).state.length() > 250) {
          std::string s = id(text_response_full).state.c_str();
          std::string truncated = esphome::str_truncate(s.c_str(), 250);
          id(text_response_full).state = truncated.c_str();
        }

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"
  - id: seconds_dot_color
    hex: "3b89e3"

spi:
  - id: spi_bus
    clk_pin: GPIO4
    mosi_pin: GPIO2

touchscreen:
  - platform: cst816
    id: my_touchscreen
    interrupt_pin: GPIO12
    reset_pin: GPIO6
    display: main_display
    i2c_id: bus_b
    on_touch:
      then:
        - script.execute: handle_screen_tap
        - binary_sensor.template.publish:
            id: touch_input
            state: ON
    on_release:
      then:
        - script.execute: reset_screensaver
        - binary_sensor.template.publish:
            id: touch_input
            state: OFF

display:
  - platform: ili9xxx
    id: main_display
    model: ${displaymodel}
    invert_colors: ${invertcolors}
    data_rate: 40MHz
    cs_pin: GPIO5
    dc_pin: GPIO47
    reset_pin:
      number: GPIO38
    update_interval: never
    dimensions:
        height: ${imageheight}
        width: ${imagewidth}
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_idle), ImageAlign::CENTER);

          if (id(show_battery_status).state) {
            // ---- layout ----
            const int top = 2;
            const int w   = 56;     // body width (no cap) - made wider
            const int h   = 24;     // body height - made taller for 14px font
            const int capw = 5;     // cap width
            const int caph = h - 8; // cap height
            const int pad  = 3;     // inner padding

            // center horizontally
            const int cx = it.get_width() / 2;
            const int x  = cx - (w + capw) / 2;
            const int y  = top;

            // percentage + color
            float pct = id(battery_percentage).state;
            if (pct < 0) pct = 0; else if (pct > 100) pct = 100;

            Color lvl = Color(0x00, 0xA8, 0x00);      // green
            if (pct <= 20)       lvl = Color(0xD0, 0x00, 0x00); // red
            else if (pct <= 50)  lvl = Color(0xD0, 0x9A, 0x00); // yellow

            // ---- body outline ----
            it.filled_rectangle(x, y, w, h, id(idle_color));
            it.rectangle(x, y, w, h, Color::WHITE); // white outline

            // cap
            const int capx = x + w;
            const int capy = y + (h - caph) / 2;
            it.filled_rectangle(capx, capy, capw, caph, Color::BLACK);
            it.rectangle(capx, capy, capw, caph, Color::WHITE);

            // inner black background
            const int inx = x + pad;
            const int iny = y + pad;
            const int inw = w - 2*pad;
            const int inh = h - 2*pad;
            it.filled_rectangle(inx, iny, inw, inh, Color::BLACK);

            // level fill
            int fw = (int)(inw * (pct / 100.0f));
            if (fw > 0) it.filled_rectangle(inx, iny, fw, inh, lvl);
            it.rectangle(inx, iny, inw, inh, Color::WHITE);

            // ---- percentage text INSIDE ----
            char txt[8];
            snprintf(txt, sizeof(txt), "%.0f%%", pct);

            // center text in body
            const int tx = x + w / 2;
            const int ty = y + h / 2;
            it.printf(tx+1, ty+1, id(font_battery), Color::BLACK, TextAlign::CENTER, "%s", txt);
            it.printf(tx,   ty,   id(font_battery), Color::WHITE, TextAlign::CENTER, "%s", txt);
          }
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          const int W = it.get_width();
          const int H = it.get_height();
          it.image(W / 2, H / 2, id(casita_thinking), ImageAlign::CENTER);

          if (id(show_text).state) {
            const int box_h = 30;
            const int margin_top = 20;
            const int box_w = std::min(210, W - 10);   // keep 5px side padding minimum
            const int x0 = (W - box_w) / 2;            // center horizontally
            const int y0 = margin_top;

            it.filled_rectangle(x0, y0, box_w, box_h, Color::WHITE);
            it.rectangle(x0, y0, box_w, box_h, Color::BLACK);
            // center text horizontally
            it.printf(W / 2, y0 + 5, id(font_request), Color::BLACK, TextAlign::TOP_CENTER, "%s",
                      id(text_request).state.c_str());
          }
          id(draw_timer_timeline).execute();
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          const int W = it.get_width();
          const int H = it.get_height();
          it.image(W / 2, H / 2, id(casita_replying), ImageAlign::CENTER);

          if (id(show_text).state) {
            const int box_h = 30;
            const int margin_bottom = 20;              // distance from bottom edge
            const int box_w = std::min(210, W - 10);   // keep 5px side padding minimum
            const int x0 = (W - box_w) / 2;            // center horizontally
            const int y0 = H - margin_bottom - box_h;  // stick to bottom with margin

            it.filled_rectangle(x0, y0, box_w, box_h, Color::WHITE);
            it.rectangle(x0, y0, box_w, box_h, Color::BLACK);
            // center text horizontally
            it.printf(W / 2, y0 + 5, id(font_response), Color::BLACK, TextAlign::TOP_CENTER, "%s",
                      id(text_response).state.c_str());
          }
          id(draw_timer_timeline).execute();
      - id: timer_finished_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_muted), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
          id(draw_active_timer_widget).execute();
      - id: now_playing_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_playing), ImageAlign::CENTER);
          // Optional: show timer progress while playing
          id(draw_timer_timeline).execute();
