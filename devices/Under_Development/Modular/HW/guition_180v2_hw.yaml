# Taichi Pi v2 hardware pack (JC3636W518V2, CST816, I2S mic+speaker)

external_components:
  - source: github://pr#10392
    components: [mipi_spi]
    refresh: 1h

# --- BUSES / PERIPHERALS ------------------------------------------------------
spi:
  id: display_qspi
  type: quad
  clk_pin: 9
  data_pins: [11, 12, 13, 14]

i2c:
  id: touchscreen_bus
  sda: 7
  scl: 8

i2s_audio:
  # Microphone bus
  - id: i2s_mic
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin:  GPIO42

  # Speaker bus
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin:  GPIO18
    i2s_mclk_pin:  GPIO21

# --- TOUCHSCREEN --------------------------------------------------------------
touchscreen:
  - platform: cst816
    id: my_touchscreen
    interrupt_pin: GPIO41
    reset_pin: GPIO40
    display: main_display
    i2c_id: touchscreen_bus

    on_touch:
      then:
        - lambda: |-
            // 'touch' is a TouchPoint here
            id(gs_touch_active) = true;
            id(gs_start_x) = touch.x;
            id(gs_start_y) = touch.y;
            id(gs_last_x)  = touch.x;
            id(gs_last_y)  = touch.y;
            id(gs_start_ms) = millis();

    on_update:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            // 'touches' is a list of TouchPoint
            for (auto &t : touches) {
              if (t.state >= 1 && t.state <= 2) {  // active/moved
                id(gs_last_x) = t.x;
                id(gs_last_y) = t.y;
                break;
              }
            }

    on_release:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            id(gs_touch_active) = false;

            const int start_x = id(gs_start_x);
            const int start_y = id(gs_start_y);
            const int end_x   = id(gs_last_x);
            const int end_y   = id(gs_last_y);
            const int dx = end_x - start_x;
            const int dy = end_y - start_y;

            const uint32_t dt = millis() - id(gs_start_ms);

            // --- SCALE WITH CURRENT SCREEN SIZE ---
            const int w = id(main_display).get_width();
            const int h = id(main_display).get_height();
            const int min_dim = (w < h) ? w : h;
            const int MIN_DIST = std::max(20, min_dim / 6);
            const uint32_t MAX_TIME = 1200; // ms

            // --- NORMALIZE (undo display rotation) using your substitution ---
            const int ROT = ${rotate_display};  // 0, 90, 180, or 270
            int ndx = dx;
            int ndy = dy;
            switch (ROT) {
              case 0:   /* ndx=dx;  ndy=dy;   */ break;
              case 90:  /* undo 90° CW: R(-90) */ ndx =  dy;  ndy = -dx; break;
              case 180: /* undo 180°           */ ndx = -dx;  ndy = -dy; break;
              case 270: /* undo 270° CW        */ ndx = -dy;  ndy =  dx; break;
              default: /* be forgiving */ break;
            }

            if (dt <= MAX_TIME) {
              if (std::abs(ndx) > std::abs(ndy) && std::abs(ndx) >= MIN_DIST) {
                if (ndx < 0) id(swipe_left).publish_state(true);
                else         id(swipe_right).publish_state(true);
              } else if (std::abs(ndy) >= MIN_DIST) {
                if (ndy < 0) id(swipe_up).publish_state(true);
                else         id(swipe_down).publish_state(true);
              }
            }
            if (!(id(swipe_left).state || id(swipe_right).state || id(swipe_up).state || id(swipe_down).state)) {
              id(touch_input).publish_state(true);
              delay(250);
              id(touch_input).publish_state(false);
            }
        - delay: 250ms
        - lambda: |-
            id(swipe_left).publish_state(false);
            id(swipe_right).publish_state(false);
            id(swipe_up).publish_state(false);
            id(swipe_down).publish_state(false);

# --- DISPLAY DRIVER (MIPI SPI JC3636W518) ------------------------------------
display:
  - platform: mipi_spi
    id: main_display
    model: JC3636W518V2
    rotation: ${rotate_display}
    update_interval: never
    dimensions:
        height: ${imageheight}
        width: ${imagewidth}
    pages: !include ../display_pages.yaml

# --- BACKLIGHT ----------------------------------------------------------------
output:
  - platform: ledc
    id: backlight_output
    pin: GPIO15
    inverted: false

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: mdi:television
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms

# --- AUDIO DEVICES ------------------------------------------------------------
switch:
  - platform: gpio
    name: Speaker Enable
    icon: "mdi:speaker"
    entity_category: config
    pin: GPIO48
    restore_mode: RESTORE_DEFAULT_ON

microphone:
  - platform: i2s_audio
    id: box_mic
    i2s_audio_id: i2s_mic
    i2s_din_pin: GPIO46
    adc_type: external
    channel: left
    pdm: true
    sample_rate: 16000
    bits_per_sample: 16bit

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_audio_id: i2s_audio_bus
    i2s_dout_pin: GPIO17
    dac_type: external
    sample_rate: 16000
    channel: stereo

# --- BATTERY (FAKE SOURCE TO KEEP WIDGET HAPPY) -------------------------------
sensor:
  - platform: adc
    id: battery_voltage
    pin: GPIO1
    attenuation: 12db
    update_interval: 24h
    internal: true
    filters:
      - lambda: 'return 4.20;'
    on_value:
      then:
        - sensor.template.publish:
            id: battery_percentage
            state: !lambda 'return x;'
