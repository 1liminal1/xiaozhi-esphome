display:
  - id: !extend main_display
    pages:
      - id: clock_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(clock_background), ImageAlign::CENTER);

          const int W = it.get_width();
          const int H = it.get_height();
          const int cx = W / 2;
          const int cy = H / 2;
          const int margin = 8;
          const int r_outer = (std::min(W, H) / 2) - margin;

          // Scale dot sizes with screen size
          const int dot_r_sec_small = std::max(2, std::min(3, W / 180));
          const int dot_r_sec_big   = dot_r_sec_small + 1;
          const int dot_r_min       = dot_r_sec_big + 2;
          const int dot_r_hr        = dot_r_min + 2;

          // Rings radii
          const int r_sec = r_outer;
          const int r_min = r_outer - 14;
          const int r_hr  = r_outer - 28;

          auto now = id(sntp_time).now();
          const int sec    = now.second;
          const int minute = now.minute;
          const int hour12 = now.hour % 12;

          // Minute colors
          const Color minute_palette[10] = {
            Color(0x3b,0x89,0xe3),
            Color(0x26,0xed,0x3a),
            Color(0xff,0xc1,0x07),
            Color(0xff,0x5a,0x36),
            Color(0xff,0x3b,0x8d),
            Color(0x9c,0x27,0xb0),
            Color(0x00,0xbc,0xd4),
            Color(0x8b,0xc3,0x4a),
            Color(0xfe,0x6d,0x73),
            Color(0x60,0x7d,0x8b)
          };
          Color sec_active_col = minute_palette[minute % 10];
          Color clock_yellow = Color(0xff,0xc1,0x07);

          // Clock color from HA color wheel (0..1 floats)
          float rr = id(clock_color_picker).current_values.get_red();
          float gg = id(clock_color_picker).current_values.get_green();
          float bb = id(clock_color_picker).current_values.get_blue();
          if (rr == 0.0f && gg == 0.0f && bb == 0.0f) { rr = gg = bb = 1.0f; } // default white
          Color clock_col((uint8_t)(rr * 255.0f), (uint8_t)(gg * 255.0f), (uint8_t)(bb * 255.0f));

          const float PI = 3.1415926f;

          // ---- Seconds ring (toggled by Clock Show Dots) ----
          if (id(clock_show_dots).state) {
            // Base white markers every 5 seconds (always visible when enabled)
            for (int i = 0; i < 60; i += 5) {
              float angle = (i / 60.0f) * 2.0f * PI - PI/2.0f;
              int x = cx + (int)(r_sec * cosf(angle));
              int y = cy + (int)(r_sec * sinf(angle));
              it.filled_circle(x, y, dot_r_sec_big, Color::WHITE);
            }
            // Active progress dots for elapsed seconds (skip 5s positions)
            for (int i = 0; i <= sec; i++) {
              if (i % 5 == 0) continue;
              float angle = (i / 60.0f) * 2.0f * PI - PI/2.0f;
              int x = cx + (int)(r_sec * cosf(angle));
              int y = cy + (int)(r_sec * sinf(angle));
              it.filled_circle(x, y, dot_r_sec_small, sec_active_col);
            }
          }

          // Minute dot (yellow)
          {
            float m_angle = (minute / 60.0f) * 2.0f * PI - PI/2.0f;
            int mx = cx + (int)(r_min * cosf(m_angle));
            int my = cy + (int)(r_min * sinf(m_angle));
            it.filled_circle(mx, my, dot_r_min, clock_yellow);
          }

          // Hour dot (yellow), smoothly moving with minutes
          {
            float h_pos = (hour12 + (minute / 60.0f)) / 12.0f;
            float h_angle = h_pos * 2.0f * PI - PI/2.0f;
            int hx = cx + (int)(r_hr * cosf(h_angle));
            int hy = cy + (int)(r_hr * sinf(h_angle));
            it.filled_circle(hx, hy, dot_r_hr, clock_yellow);
          }

          // ---- Time string ----
          char time_str[32];
          if (id(clock_24h).state) {
            if (id(clock_show_seconds).state) {
              snprintf(time_str, sizeof(time_str), "%02d:%02d:%02d", now.hour, minute, sec);
            } else {
              snprintf(time_str, sizeof(time_str), "%02d:%02d", now.hour, minute);
            }
          } else {
            int h = now.hour % 12; if (h == 0) h = 12;
            const char* ampm = (now.hour < 12) ? "AM" : "PM";
            if (id(clock_show_seconds).state) {
              snprintf(time_str, sizeof(time_str), "%d:%02d:%02d%s", h, minute, sec, ampm);
            } else {
              snprintf(time_str, sizeof(time_str), "%d:%02d%s", h, minute, ampm);
            }
          }

          // If date is ON, shift clock up; if OFF, center clock vertically
          int clock_y = id(clock_show_date).state ? (cy - 24) : cy;
          it.printf(cx, clock_y, id(font_big_clock_mono), clock_col, TextAlign::CENTER, "%s", time_str);

          // ---- Date ----
          if (id(clock_show_date).state) {
            if (id(clock_24h).state) {
              it.strftime(cx, cy + 14, id(font_big_date), clock_col, TextAlign::CENTER, "%a, %d %b", now);
            } else {
              it.strftime(cx, cy + 14, id(font_big_date), clock_col, TextAlign::CENTER, "%a, %b %d", now);
            }
          }
